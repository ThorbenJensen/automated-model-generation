edge_index <- 1
## make local connections (according to degree target and d_NBHD)
# iterate over households
system.time(
for (id1 in 1:nrow(households)) {
#   for (id1 in 0:1000) {
# print( paste("Assigning neighbors to household",id1,"of",length(hh$ID),"households..."))
if (id1 %% 100 == 0) print( paste("assigning local neighbors to household", paste(id1), "of", nrow(households)))
# calculate needed connections for this node
needed_connetions <- households[id1,3] - households[id1,2]
# IF no needed connections OR greater degree than deg_target: skip id
if( needed_connetions <= 0 ) next
free_neighbors <- potential_neighbors[[id1]] # get IDs of free neighbors (index correction)
free_neighbors <- free_neighbors[ ! free_neighbors %in% edges[ edges[,1] == id1, 2] ] # remove those FROM which already a connection exists
free_neighbors_cluster <- unlist( lapply( hh$group[free_neighbors], cluster) )   #list 'lifestyle cluster' of these free neighbors
## consider homophily
# Draw set of lifestyles to connect to (based on Holzhauser's empirical homophily)
neighbors_lifestyles <- homophily( hh$group[id1], needed_connetions )
# For each drawn lifestyle, sample a free_neighbor with that lifestyle - result: 'new neighbors'
new_neighbors <- numeric()
for (c in unique(neighbors_lifestyles)) {
# number of times this cluster occurs
frequence <- as.numeric( table(neighbors_lifestyles)[c] )
# select free_neighbors with from this 'cluster'
free_neighbors_from_cluster <- free_neighbors[ which(free_neighbors_cluster == c) ]
# IF no free neighbors with this lifestyle: leave for loop
if (length(free_neighbors_from_cluster) == 0) next
# IF more free neighbors than needed: lower 'frequence'
if (frequence > length(free_neighbors_from_cluster)) frequence <- length(free_neighbors_from_cluster)
# sample 'frequence' from free_neighbors  - BUG: sampling not from free_neighbors_from_cluster??
if (length(free_neighbors_from_cluster) > 1) {
chosen_neighbors <- sample(free_neighbors_from_cluster, frequence, replace = FALSE)
} else {
chosen_neighbors <- free_neighbors_from_cluster
}
# ASSERT: chosen neighbors within d_NBHD of id1
if( Reduce("&", ! chosen_neighbors %in% unlist(potential_neighbors[id1])) ) stop( paste("Id1 ",id1,"NOT within d_NBHD of id2",chosen_neighbors))
# add to 'new_neighbors'
new_neighbors <- c(new_neighbors, chosen_neighbors)
}
# VALIDATE lifestyle of new_neighbors:
# sort(unlist( lapply( lifestyle[new_neighbors], cluster) ))
# IF no free neighbors: skip id1
if ( length(new_neighbors) == 0 ) next
# assign new neighbors to household
for (id2 in new_neighbors) {
edges[ edge_index, ] <- c(id1-1,id2-1)
edge_index <- edge_index + 1
}
# update in-degree for id1 in hh
households[id1] <- households[id1] + length( new_neighbors )
}
)
## GRAPH QUALITY ASSESSMENT
# ASSERT: no household with greater degree than deg_target
households_exceeding_target <- nrow( households[ households[,2] > households[,3] ,])
if (households_exceeding_target > 0) warning(paste( households_exceeding_target, "households with greater degree than deg_target!"))
# ASSERT: no household with no links
households_without_degree <- nrow( households[ households[,2] == 0 ,])
if (households_without_degree > 0) {
warning(paste( households_without_degree, "households with no local links!"))
warning(paste(round((length( edges[ edges[,1] != 0 ,1] ) / length( edges[,1] )) * 100, 2), "% of local edges created"))
}
households2 <- households
edges2 <- edges
head(edges)
library(rgeos)
# initialize degree and deg_target
degrees <- c(1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8)   # from SusLab interviews
random_degrees <- sample(degrees, nrow(hh), replace=T)
hh$deg_target <- random_degrees
hh$degree <- 0
# copy relevant content from 'hh'
households <- as.matrix(data.frame(ID=as.numeric(hh$id),
degree=as.numeric(hh$degree),
deg_target=as.numeric(hh$deg_target)))
# store edges globally ([1] = id1; [2] = id2)
needed_edges <- sum(households[,3])
# edges (format: in - out)
edges <- matrix(data = 0, nrow = needed_edges, ncol = 2)
# where to write next edge
edge_index <- 1
## make local connections (according to degree target and d_NBHD)
# iterate over households
system.time(
for (id1 in 1:nrow(households)) {
#   for (id1 in 0:1000) {
# print( paste("Assigning neighbors to household",id1,"of",length(hh$ID),"households..."))
if (id1 %% 100 == 0) print( paste("assigning local neighbors to household", paste(id1), "of", nrow(households)))
# calculate needed connections for this node
needed_connetions <- households[id1,3] - households[id1,2]
# IF no needed connections OR greater degree than deg_target: skip id
if( needed_connetions <= 0 ) next
free_neighbors <- potential_neighbors[[id1]] # get IDs of free neighbors (index correction)
free_neighbors <- free_neighbors[ ! free_neighbors %in% edges[ edges[,1] == id1, 2] ] # remove those FROM which already a connection exists
free_neighbors_cluster <- unlist( lapply( hh$group[free_neighbors], cluster) )   #list 'lifestyle cluster' of these free neighbors
## consider homophily
# Draw set of lifestyles to connect to (based on Holzhauser's empirical homophily)
neighbors_lifestyles <- homophily( hh$group[id1], needed_connetions )
# For each drawn lifestyle, sample a free_neighbor with that lifestyle - result: 'new neighbors'
new_neighbors <- numeric()
for (c in unique(neighbors_lifestyles)) {
# number of times this cluster occurs
frequence <- as.numeric( table(neighbors_lifestyles)[c] )
# select free_neighbors with from this 'cluster'
free_neighbors_from_cluster <- free_neighbors[ which(free_neighbors_cluster == c) ]
# IF no free neighbors with this lifestyle: leave for loop
if (length(free_neighbors_from_cluster) == 0) next
# IF more free neighbors than needed: lower 'frequence'
if (frequence > length(free_neighbors_from_cluster)) frequence <- length(free_neighbors_from_cluster)
# sample 'frequence' from free_neighbors  - BUG: sampling not from free_neighbors_from_cluster??
if (length(free_neighbors_from_cluster) > 1) {
chosen_neighbors <- sample(free_neighbors_from_cluster, frequence, replace = FALSE)
} else {
chosen_neighbors <- free_neighbors_from_cluster
}
# ASSERT: chosen neighbors within d_NBHD of id1
if( Reduce("&", ! chosen_neighbors %in% unlist(potential_neighbors[id1])) ) stop( paste("Id1 ",id1,"NOT within d_NBHD of id2",chosen_neighbors))
# add to 'new_neighbors'
new_neighbors <- c(new_neighbors, chosen_neighbors)
}
# VALIDATE lifestyle of new_neighbors:
# sort(unlist( lapply( lifestyle[new_neighbors], cluster) ))
# IF no free neighbors: skip id1
if ( length(new_neighbors) == 0 ) next
# assign new neighbors to household
for (id2 in new_neighbors) {
edges[ edge_index, ] <- c(id1,id2)
edge_index <- edge_index + 1
}
# update in-degree for id1 in hh
households[id1,2] <- households[id1,2] + length( new_neighbors )
}
)
## GRAPH QUALITY ASSESSMENT
# ASSERT: no household with greater degree than deg_target
households_exceeding_target <- nrow( households[ households[,2] > households[,3] ,])
if (households_exceeding_target > 0) warning(paste( households_exceeding_target, "households with greater degree than deg_target!"))
# ASSERT: no household with no links
households_without_degree <- nrow( households[ households[,2] == 0 ,])
if (households_without_degree > 0) {
warning(paste( households_without_degree, "households with no local links!"))
warning(paste(round((length( edges[ edges[,1] != 0 ,1] ) / length( edges[,1] )) * 100, 2), "% of local edges created"))
}
head(edges)
households2 <- households
edges2 <- edges
p_NBHD <- 0.5
sort( sample( 1:nrow(edges2), round( p_NBHD * nrow(edges2)) ) )
nrow(edges)
indexes_to_remove <- sort( sample( 1:nrow(edges2), round( p_NBHD * nrow(edges2)) ) )
deg_decrement <- data.frame( table( edges2[indexes_to_remove,1]) )
names(deg_decrement) <- c("ID", "decrement")
names(deg_decrement)
for (id in deg_decrement$ID) {
id_numeric <- as.numeric(id)
if( id_numeric %% 100 == 0) print(paste("Decreasing in-degree for node ", id, "of max. 32.000"))
# in households, reduce degree
households2[id_numeric,2] <- households2[id_numeric,2] - deg_decrement[deg_decrement$ID == id,]$decrement
}
households2(head
)
head(households2)
if( nrow( households2[ households2[,2] < 0 ,]) > 0) stop( "households2 contains households with negative degree!" )
indexes_to_remove
edges2 <- edges2[ - indexes_to_remove ,]
nrow(edges2)
nrow(edges)
nrow(edges)*2
nrow(edges2)*2
households3 <- households2
edges3 <- edges2
# copy edge vector and households from above
households3 <- households2
edges3 <- edges2
# remove potential zero lines from edges3
edges3 <- edges3[edges3[,1] != 0,]
# calculate size of matrix to be allocated
total_edges <- sum(households3[,3])
rows_now <- nrow(edges3)
rows_needed <- total_edges - rows_now
# allocating new 'edge3' matrix with empty rows
zero_vector <- rep(0, rows_needed)
edges3 <- cbind( c(edges3[,1], zero_vector), c(edges3[,2], zero_vector))
# initialize writing index
edge_index <- rows_now + 1
## 'fill up' with global connections
system.time(
for (id1 in 1:nrow(households)) {
if (id1 %% 100 == 0) print( paste("assigning global neighbors to household", paste(id1), "of 31840"))
# calculate needed connections for this node
needed_connections <- households3[id1,3] - households3[id1,2]
# IF no needed connections OR greater degree than deg_target: skip id
if( needed_connections <= 0 ) next
# IF needed conenction negative: report error
#     if( needed_connetions < 0 ) stop ("Household with ID=id1 has greater degree than deg_target!")
# get IDs of other households
other_households <- households3[ households3[,1] != id1, 1 ]
# remove those households from 'other_households' FROM which already a connection exists (in-link to id1)
other_households <- other_households[ ! other_households %in% edges3[ edges3[,1] == id1, 2] ]
# list 'lifestyle cluster' of these free neighbors
other_households_cluster <- unlist( lapply( lifestyle[other_households], cluster) )
## consider homophily
# Draw set of lifestyles to connect to (based on Holzhauser's empirical homophily)
neighbors_lifestyles <- homophily( lifestyle[id1], needed_connections )
# For each drawn lifestyle, sample a free_neighbor with that lifestyle - result: 'new neighbors'
new_neighbors <- numeric()
for (c in unique(neighbors_lifestyles)) {
# print(tag)
# number of times this cluster occurs
frequence <- as.numeric( table(neighbors_lifestyles)[c] )
# select free_neighbors with from this 'cluster'
free_households_from_cluster <- other_households[ which(other_households_cluster == c) ]
# PERFORMANCE OPTION: remove here: id1 and households from which a link exists
# IF no free neighbors with this lifestyle: leave for loop
if (length(free_households_from_cluster) == 0) next
# IF more free neighbors than needed: lower 'frequence'
if (frequence > length(free_households_from_cluster)) frequence <- length(free_households_from_cluster)
# sample 'frequence' from free_neighbors  - BUG: sampling not from free_neighbors_from_cluster??
if (length(free_households_from_cluster) > 1) {
chosen_neighbors <- sample(free_households_from_cluster, frequence, replace = FALSE)
} else {
chosen_neighbors <- free_households_from_cluster
}
# add to 'new_neighbors'
new_neighbors <- c(new_neighbors, chosen_neighbors)
}
# VALIDATE lifestyle of new_neighbors:
# sort(unlist( lapply( lifestyle[new_neighbors], cluster) ))
# IF no free neighbors: skip id1
if ( length(new_neighbors) == 0 ) next
# assign new neighbors to household
for (id2 in new_neighbors) {
edges3[ edge_index, ] <- c(id1,id2)
edge_index <- edge_index + 1
}
# update in-degree for id1 in hh
households3[id1,2] <- households3[id1,2] + length( new_neighbors )
}
)
## RESULT QUALITY
# TESET: no household with greater degree than deg_target
households_deg_exceeding <- length( households3[ households3[,2] > households3[,3] ,1] )
if ( households_deg_exceeding > 0) warning( paste(households_deg_exceeding,"household(s) with greater degree than deg_target!") )
# TEST: every household has enough links
households_deg_lower <- length( households3[ households3[,2] < households3[,3] ,1] )
if ( households_deg_lower > 0) warning( paste(households_deg_lower,"household(s) with lower degree than deg_target!") )
# ASSERT: every household has at least one link
households_deg_lower <- length( households3[ households3[,2] == 0 ,1] )
if ( households_deg_lower > 0) stop ( paste(households_deg_lower,"household(s) are not connected to any edges!") )
# TODO: correct index of edges3
# TODO: write edges3 to file
hh$group[other_households]
hh$group[id1]
homophily( hh$group[id1], needed_connections )
# copy edge vector and households from above
households3 <- households2
edges3 <- edges2
# remove potential zero lines from edges3
edges3 <- edges3[edges3[,1] != 0,]
# calculate size of matrix to be allocated
total_edges <- sum(households3[,3])
rows_now <- nrow(edges3)
rows_needed <- total_edges - rows_now
# allocating new 'edge3' matrix with empty rows
zero_vector <- rep(0, rows_needed)
edges3 <- cbind( c(edges3[,1], zero_vector), c(edges3[,2], zero_vector))
# initialize writing index
edge_index <- rows_now + 1
## 'fill up' with global connections
system.time(
for (id1 in 1:nrow(households)) {
if (id1 %% 100 == 0) print( paste("assigning global neighbors to household", paste(id1), "of 31840"))
# calculate needed connections for this node
needed_connections <- households3[id1,3] - households3[id1,2]
# IF no needed connections OR greater degree than deg_target: skip id
if( needed_connections <= 0 ) next
# IF needed conenction negative: report error
#     if( needed_connetions < 0 ) stop ("Household with ID=id1 has greater degree than deg_target!")
# get IDs of other households
other_households <- households3[ households3[,1] != id1, 1 ]
# remove those households from 'other_households' FROM which already a connection exists (in-link to id1)
other_households <- other_households[ ! other_households %in% edges3[ edges3[,1] == id1, 2] ]
# list 'lifestyle cluster' of these free neighbors
other_households_cluster <- unlist( lapply( hh$group[other_households], cluster) )
## consider homophily
# Draw set of lifestyles to connect to (based on Holzhauser's empirical homophily)
neighbors_lifestyles <- homophily( hh$group[id1], needed_connections )
# For each drawn lifestyle, sample a free_neighbor with that lifestyle - result: 'new neighbors'
new_neighbors <- numeric()
for (c in unique(neighbors_lifestyles)) {
# print(tag)
# number of times this cluster occurs
frequence <- as.numeric( table(neighbors_lifestyles)[c] )
# select free_neighbors with from this 'cluster'
free_households_from_cluster <- other_households[ which(other_households_cluster == c) ]
# PERFORMANCE OPTION: remove here: id1 and households from which a link exists
# IF no free neighbors with this lifestyle: leave for loop
if (length(free_households_from_cluster) == 0) next
# IF more free neighbors than needed: lower 'frequence'
if (frequence > length(free_households_from_cluster)) frequence <- length(free_households_from_cluster)
# sample 'frequence' from free_neighbors  - BUG: sampling not from free_neighbors_from_cluster??
if (length(free_households_from_cluster) > 1) {
chosen_neighbors <- sample(free_households_from_cluster, frequence, replace = FALSE)
} else {
chosen_neighbors <- free_households_from_cluster
}
# add to 'new_neighbors'
new_neighbors <- c(new_neighbors, chosen_neighbors)
}
# VALIDATE lifestyle of new_neighbors:
# sort(unlist( lapply( lifestyle[new_neighbors], cluster) ))
# IF no free neighbors: skip id1
if ( length(new_neighbors) == 0 ) next
# assign new neighbors to household
for (id2 in new_neighbors) {
edges3[ edge_index, ] <- c(id1,id2)
edge_index <- edge_index + 1
}
# update in-degree for id1 in hh
households3[id1,2] <- households3[id1,2] + length( new_neighbors )
}
)
## RESULT QUALITY
# TESET: no household with greater degree than deg_target
households_deg_exceeding <- length( households3[ households3[,2] > households3[,3] ,1] )
if ( households_deg_exceeding > 0) warning( paste(households_deg_exceeding,"household(s) with greater degree than deg_target!") )
# TEST: every household has enough links
households_deg_lower <- length( households3[ households3[,2] < households3[,3] ,1] )
if ( households_deg_lower > 0) warning( paste(households_deg_lower,"household(s) with lower degree than deg_target!") )
# ASSERT: every household has at least one link
households_deg_lower <- length( households3[ households3[,2] == 0 ,1] )
if ( households_deg_lower > 0) stop ( paste(households_deg_lower,"household(s) are not connected to any edges!") )
# TODO: correct index of edges3
# TODO: write edges3 to file
head(edges3)
View(edges3)
View(hh_df)
View(hh)
head(households3)
as.data.frame(edges3)
edges_final <- as.data.frame(edges3)
colnames(edges_final)
edges_final[order(V1)]
colnames(edges_final)
colnames(edges_final) <- c("out", "in")
edges_final[order(out),]
colnames(edges_final) <- c("out", "in")
edges_final[order(out),]
head(edges_final)
order(edges_final$out)
edges_final[order(edges_final$out),]
edges_final           <- edges_final[order(edges_final$out),]
head(edges_final)
View(edges_final)
View(hh)
edges_final - 1
head(edges_final - 1)
edges_final <- edges_final - 1
write.table(edges_final, "network_new.csv", sep="\t")
write.csv(edges_final, "network_new.csv", sep="\t")
write.table(edges_final, "network_new.csv", sep="\t")
write.table(edges_final, "network_new.csv", sep="\t", row.names = FALSE)
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
# copy edge vector and households from above
households3 <- households2
edges3 <- edges2
# remove potential zero lines from edges3
edges3 <- edges3[edges3[,1] != 0,]
# calculate size of matrix to be allocated
total_edges <- sum(households3[,3])
rows_now <- nrow(edges3)
rows_needed <- total_edges - rows_now
# allocating new 'edge3' matrix with empty rows
zero_vector <- rep(0, rows_needed)
edges3 <- cbind( c(edges3[,1], zero_vector), c(edges3[,2], zero_vector))
# initialize writing index
edge_index <- rows_now + 1
## 'fill up' with global connections
system.time(
for (id1 in 1:nrow(households)) {
if (id1 %% 100 == 0) print( paste("assigning global neighbors to household", paste(id1), "of 31840"))
# calculate needed connections for this node
needed_connections <- households3[id1,3] - households3[id1,2]
# IF no needed connections OR greater degree than deg_target: skip id
if( needed_connections <= 0 ) next
# IF needed conenction negative: report error
#     if( needed_connetions < 0 ) stop ("Household with ID=id1 has greater degree than deg_target!")
# get IDs of other households
other_households <- households3[ households3[,1] != id1, 1 ]
# remove those households from 'other_households' FROM which already a connection exists (in-link to id1)
other_households <- other_households[ ! other_households %in% edges3[ edges3[,1] == id1, 2] ]
# list 'lifestyle cluster' of these free neighbors
other_households_cluster <- unlist( lapply( hh$group[other_households], cluster) )
## consider homophily
# Draw set of lifestyles to connect to (based on Holzhauser's empirical homophily)
neighbors_lifestyles <- homophily( hh$group[id1], needed_connections )
# For each drawn lifestyle, sample a free_neighbor with that lifestyle - result: 'new neighbors'
new_neighbors <- numeric()
for (c in unique(neighbors_lifestyles)) {
# print(tag)
# number of times this cluster occurs
frequence <- as.numeric( table(neighbors_lifestyles)[c] )
# select free_neighbors with from this 'cluster'
free_households_from_cluster <- other_households[ which(other_households_cluster == c) ]
# PERFORMANCE OPTION: remove here: id1 and households from which a link exists
# IF no free neighbors with this lifestyle: leave for loop
if (length(free_households_from_cluster) == 0) next
# IF more free neighbors than needed: lower 'frequence'
if (frequence > length(free_households_from_cluster)) frequence <- length(free_households_from_cluster)
# sample 'frequence' from free_neighbors  - BUG: sampling not from free_neighbors_from_cluster??
if (length(free_households_from_cluster) > 1) {
chosen_neighbors <- sample(free_households_from_cluster, frequence, replace = FALSE)
} else {
chosen_neighbors <- free_households_from_cluster
}
# add to 'new_neighbors'
new_neighbors <- c(new_neighbors, chosen_neighbors)
}
# VALIDATE lifestyle of new_neighbors:
# sort(unlist( lapply( lifestyle[new_neighbors], cluster) ))
# IF no free neighbors: skip id1
if ( length(new_neighbors) == 0 ) next
# assign new neighbors to household
for (id2 in new_neighbors) {
edges3[ edge_index, ] <- c(id1,id2)
edge_index <- edge_index + 1
}
# update in-degree for id1 in hh
households3[id1,2] <- households3[id1,2] + length( new_neighbors )
}
)
## RESULT QUALITY
# TESET: no household with greater degree than deg_target
households_deg_exceeding <- length( households3[ households3[,2] > households3[,3] ,1] )
if ( households_deg_exceeding > 0) warning( paste(households_deg_exceeding,"household(s) with greater degree than deg_target!") )
# TEST: every household has enough links
households_deg_lower <- length( households3[ households3[,2] < households3[,3] ,1] )
if ( households_deg_lower > 0) warning( paste(households_deg_lower,"household(s) with lower degree than deg_target!") )
# ASSERT: every household has at least one link
households_deg_lower <- length( households3[ households3[,2] == 0 ,1] )
if ( households_deg_lower > 0) stop ( paste(households_deg_lower,"household(s) are not connected to any edges!") )
# sort data.frame 'edges3' by 1st column:
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("out", "in")
edges_final           <- edges_final[order(edges_final$out),]
# correct index of first column in edges3
edges_final <- edges_final$out - 1
# write edges3 to file
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("out", "in")
edges_final           <- edges_final[order(edges_final$out),]
# correct index of first column in edges3
edges_final$out <- edges_final$out - 1
# write edges3 to file
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
edges_final[edges_final$in == edges_final$out,]
edges_final$in == edges_final$out
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("from", "to")
edges_final           <- edges_final[order(edges_final$from),]
# correct index of first column in edges3
edges_final$from <- edges_final$from - 1
edges_final[edges_final$from == edges_final$to,]
edges_final[ - (edges_final$from == edges_final$to),]
edges_final <- edges_final[ - (edges_final$from == edges_final$to),]
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
edges_final[ edges_final$from != edges_final$to,]
edges_final <- edges_final[ edges_final$from != edges_final$to,]
edges_final[edges_final$from == edges_final$to,]
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("to", "from")
edges_final           <- edges_final[order(edges_final$from),]
# correct index of first column in edges3
edges_final$from <- edges_final$from - 1
View(edges_final)
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("to", "from")
edges_final           <- edges_final[order(edges_final$from),]
# correct index of 'to' column in edges3
edges_final$from <- edges_final$to - 1
View(edges_final)
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("to", "from")
edges_final           <- edges_final[order(edges_final$from),]
# correct index of 'to' column in edges3
edges_final$from <- edges_final$to - 1
View(edges_final)
edges_final           <- as.data.frame(edges3)
head(edges_final)
colnames(edges_final) <- c("to", "from")
head(edges_final)
edges_final$from <- edges_final$to - 1
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("to", "from")
edges_final           <- edges_final[order(edges_final$from),]
# correct index of 'to' column in edges3
edges_final$to <- edges_final$to - 1
head(edges_final)
edges_final           <- as.data.frame(edges3)
colnames(edges_final) <- c("to", "from")
edges_final           <- edges_final[order(edges_final$to),]
# correct index of 'to' column in edges3
edges_final$to <- edges_final$to - 1
head(edges_final)
head(edges_final,10)
edges_final$from != edges_final$to
edges_final <- edges_final[ edges_final$from != edges_final$to,]
write.table(edges_final, "network.csv", sep="\t", row.names = FALSE)
