;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SCALE FREE NETWORK ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup-scale-free-network
  clear-all
  no-display
;  set-default-shape turtles "circle"

  ;; make the initial network of two turtles and an edge
  make-node nobody        ;; first node, unattached
  make-node turtle 0      ;; second node, attached to first node

  repeat ((count turtles) - 2) [ go ]  
  reset-ticks
  
  ; color and specify links as "both_layers"
  ask links [ 
    set color white
  ]
  
  ; set set infected and aware to FALSE, size to 1.5
  ask turtles [
    set size 1.5
    set shape "circle"
    set color green
  ]
  
  tick
  display
end

to go
  ;; new edge is green, old edges are gray
  ask links [ set color gray ]
  make-node find-partner         ;; find partner & use it as attachment
                                 ;; point for new node
  layout
end

;; used for creating a new node
to make-node [old-node]
  crt 1
  [
    set color red
    set shape "person"
    ifelse old-node = nobody
      [ move-to patch-at ((max-pxcor - min-pxcor) / 2) ((max-pycor - min-pycor) / 2)  ]
      [ 
        create-link-with old-node [ set color green ]
        ;; position the new node near its partner
        move-to old-node
        fd 8
      ]
  ]
end

;; This code is borrowed from Lottery Example (in the Code Examples
;; section of the Models Library).
;; The idea behind the code is a bit tricky to understand.
;; Basically we take the sum of the degrees (number of connections)
;; of the turtles, and that's how many "tickets" we have in our lottery.
;; Then we pick a random "ticket" (a random number).  Then we step
;; through the turtles to figure out which node holds the winning ticket.
to-report find-partner
  let total random-float sum [count link-neighbors] of turtles
  let partner nobody
  ask turtles
  [
    let nc count link-neighbors
    ;; if there's no winner yet...
    if partner = nobody
    [
      ifelse nc > total
        [ set partner self ]
        [ set total total - nc ]
    ]
  ]
  report partner
end

;; resize-nodes, change back and forth from size based on degree to a size of 1
to resize-nodes
  ifelse all? turtles [size <= 2.5]
  [
    ;; a node is a circle with diameter determined by
    ;; the SIZE variable; using SQRT makes the circle's
    ;; area proportional to its degree
    ask turtles [ set size sqrt count link-neighbors ]
  ]
  [
    ask turtles [ set size 2.5 ]
  ]
end

to layout
  ;; the number 3 here is arbitrary; more repetitions slows down the
  ;; model, but too few gives poor layouts
  repeat 3 [
    ;; the more turtles we have to fit into the same amount of space,
    ;; the smaller the inputs to layout-spring we'll need to use
    let factor sqrt count turtles
    set factor factor * 2
    ;; numbers here are arbitrarily chosen for pleasing appearance
    layout-spring turtles links (1 / factor) (7 / factor) (1 / factor)
    ;; display  ;; for smooth animation
  ]
  ;; don't bump the edges of the world
  let x-offset max [xcor] of turtles - min [xcor] of turtles + ((max-pxcor - min-pxcor) / 2) 
  let y-offset max [ycor] of turtles - min [ycor] of turtles + ((max-pycor - min-pycor) / 2)
  ;; big jumps look funny, so only adjust a little each time
  set x-offset limit-magnitude x-offset 0.1
  set y-offset limit-magnitude y-offset 0.1
  ;ask turtles [ setxy (xcor - x-offset / 2) (ycor - y-offset / 2) ]
end

to-report limit-magnitude [number limit]
  if number > limit [ report limit ]
  if number < (- limit) [ report (- limit) ]
  report number
end